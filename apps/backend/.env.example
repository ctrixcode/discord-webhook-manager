# Server Configuration
PORT=4000
NODE_ENV=development
FRONTEND_URL=http://localhost:3000

# Database Configuration
MONGO_URL=mongodb+srv://<user>:<pass>@cluster.mongodb.net/test

# CORS Configuration
ALLOWED_ORIGINS=https://yourdomain.com,https://app.yourdomain.com

# Security
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
JWT_ACCESS_TOKEN_EXPIRES_IN=15m
JWT_REFRESH_TOKEN_EXPIRES_IN=7d

# Optional: Logging
LOG_LEVEL=info 

# Discord OAuth2
DISCORD_CLIENT_ID=your_discord_client_id
DISCORD_CLIENT_SECRET=your_discord_client_secret
DISCORD_REDIRECT_URI=http://localhost:4000/api/auth/discord/callback

# Cloudinary Configuration
CLOUDINARY_CLOUD_NAME=your_cloudinary_cloud_name
CLOUDINARY_API_KEY=your_cloudinary_api_key
CLOUDINARY_API_SECRET=your_cloudinary_api_secret

# Encryption
ENCRYPTION_KEY="your_32_byte_encryption_key_here" # Generate a random 32-character key

# Google OAuth2 Configuration
# Used for both user authentication AND sending emails via Gmail API
# Create these at: https://console.cloud.google.com/apis/credentials
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

# Google OAuth2 - User Login
GOOGLE_OAUTH_REDIRECT_URI=http://localhost:4000/api/auth/google/callback

# Gmail API - Email Sending (uses app owner's Gmail account)
# Get refresh token from: https://developers.google.com/oauthplayground
# Required scopes: https://www.googleapis.com/auth/gmail.send
# IMPORTANT: The refresh token must be generated using the SAME GOOGLE_CLIENT_ID and
# GOOGLE_CLIENT_SECRET above. If you change the client credentials, you must regenerate
# this token. See docs/GOOGLE_OAUTH_SETUP.md for instructions.
GMAIL_REFRESH_TOKEN=your_gmail_refresh_token
FROM_EMAIL=your_email@gmail.com
